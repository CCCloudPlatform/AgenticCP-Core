name: Test Coverage Report

on:
  pull_request:
    branches: [ develop, main ]
  push:
    branches: [ develop, main ]

env:
  JAVA_VERSION: '17'

jobs:
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0.33
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: agenticcp
          MYSQL_USER: agenticcp
          MYSQL_PASSWORD: agenticcppassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -prootpassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h localhost -u root -prootpassword --silent; do
          echo "Waiting for MySQL to be ready..."
          sleep 2
        done
        echo "MySQL is ready!"

    - name: Run tests with coverage
      run: mvn clean test jacoco:report
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/agenticcp?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
        SPRING_DATASOURCE_USERNAME: agenticcp
        SPRING_DATASOURCE_PASSWORD: agenticcppassword
        SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Generate coverage summary
      run: |
        echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "target/site/jacoco/index.html" ]; then
          echo "✅ Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Coverage Report Location**: target/site/jacoco/index.html" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **View Report**: Download the coverage artifacts to view the detailed report" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Coverage report generation failed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: target/site/jacoco/

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Coverage report가 있는지 확인
            const coveragePath = 'target/site/jacoco/index.html';
            if (fs.existsSync(coveragePath)) {
              const comment = `## 📊 Test Coverage Report
              
              ✅ **Coverage report generated successfully**
              
              📁 **Report Location**: \`target/site/jacoco/index.html\`
              
              🔗 **View Report**: Download the coverage artifacts from the Actions tab to view the detailed report.
              
              ---
              *This comment is automatically generated by the CI/CD pipeline.*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Coverage report not found or error occurred:', error.message);
          }
