name: Sprint Automation

on:
  schedule:
    # 매주 월요일 오전 9시 (UTC) - 스프린트 시작
    - cron: '0 0 * * 1'
    # 매주 금요일 오후 6시 (UTC) - 스프린트 리뷰
    - cron: '0 18 * * 5'
  workflow_dispatch:
    inputs:
      action:
        description: 'Sprint action to perform'
        required: true
        default: 'start'
        type: choice
        options:
          - start
          - review
          - close

jobs:
  sprint-start:
    if: github.event_name == 'schedule' && github.event.schedule == '0 0 * * 1' || github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'start'
    runs-on: ubuntu-latest
    steps:
      - name: Start New Sprint
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // 현재 스프린트 번호 계산 (2024년 1월 1일 기준)
            const startDate = new Date('2024-01-01');
            const currentDate = new Date();
            const weeksSinceStart = Math.floor((currentDate - startDate) / (7 * 24 * 60 * 60 * 1000));
            const sprintNumber = weeksSinceStart + 1;
            
            console.log(`Starting Sprint ${sprintNumber}`);
            
            // 스프린트 시작 이슈 생성
            const sprintIssue = await github.rest.issues.create({
              owner: owner,
              repo: repo,
              title: `[SPRINT] Sprint ${sprintNumber} 시작`,
              body: `# Sprint ${sprintNumber} 시작
              
## 📅 스프린트 정보
- **스프린트 번호**: ${sprintNumber}
- **시작일**: ${currentDate.toISOString().split('T')[0]}
- **종료일**: ${new Date(currentDate.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}
              
## 🎯 스프린트 목표
- [ ] 목표 1
- [ ] 목표 2
- [ ] 목표 3
              
## 📋 포함된 UserStory
<!-- 이 스프린트에 포함된 UserStory들을 나열하세요 -->
              
## 📊 추정 Story Point
- **총 Story Point**: 0 SP
- **팀 용량**: 40 SP
- **여유분**: 40 SP
              
## 👥 팀원별 할당
- **개발자 1**: 0 SP
- **개발자 2**: 0 SP
- **개발자 3**: 0 SP
              
## 📝 스프린트 노트
<!-- 스프린트 관련 특이사항이나 주의사항을 작성하세요 -->`,
              labels: ['sprint', 'in-progress']
            });
            
            console.log(`Created Sprint ${sprintNumber} issue: #${sprintIssue.data.number}`);
            
            // ready-for-work 상태의 UserStory들을 in-progress로 변경
            const readyUserStories = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue label:user-story label:ready-for-work`
            });
            
            for (const userStory of readyUserStories.data.items) {
              await github.rest.issues.addLabels({
                owner: owner,
                repo: repo,
                issue_number: userStory.number,
                labels: ['in-progress']
              });
              
              await github.rest.issues.removeLabel({
                owner: owner,
                repo: repo,
                issue_number: userStory.number,
                name: 'ready-for-work'
              }).catch(() => {});
              
              console.log(`Moved UserStory #${userStory.number} to in-progress`);
            }

  sprint-review:
    if: github.event_name == 'schedule' && github.event.schedule == '0 18 * * 5' || github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'review'
    runs-on: ubuntu-latest
    steps:
      - name: Sprint Review
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // 현재 스프린트 번호 계산
            const startDate = new Date('2024-01-01');
            const currentDate = new Date();
            const weeksSinceStart = Math.floor((currentDate - startDate) / (7 * 24 * 60 * 60 * 1000));
            const sprintNumber = weeksSinceStart;
            
            console.log(`Reviewing Sprint ${sprintNumber}`);
            
            // 완료된 UserStory 통계
            const completedUserStories = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue label:user-story label:done`
            });
            
            // 진행 중인 UserStory 통계
            const inProgressUserStories = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue label:user-story label:in-progress`
            });
            
            // 완료된 Feature 통계
            const completedFeatures = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue label:feature label:done`
            });
            
            // 완료된 Task 통계
            const completedTasks = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue label:task label:done`
            });
            
            // Story Point 계산 (간단한 추정)
            const estimatedStoryPoints = completedUserStories.data.items.length * 5; // 평균 5 SP로 추정
            
            // 스프린트 리뷰 이슈 생성
            const reviewIssue = await github.rest.issues.create({
              owner: owner,
              repo: repo,
              title: `[SPRINT-REVIEW] Sprint ${sprintNumber} 리뷰`,
              body: `# Sprint ${sprintNumber} 리뷰
              
## 📊 완료 통계
- **완료된 UserStory**: ${completedUserStories.data.items.length}개
- **완료된 Feature**: ${completedFeatures.data.items.length}개
- **완료된 Task**: ${completedTasks.data.items.length}개
- **추정 완료 Story Point**: ${estimatedStoryPoints} SP
              
## 🎯 달성한 목표
- [ ] 목표 1
- [ ] 목표 2
- [ ] 목표 3
              
## 📈 성과 분석
### 잘한 점
- 
- 
- 
              
### 개선할 점
- 
- 
- 
              
### 다음 스프린트에서 시도할 점
- 
- 
- 
              
## 🔄 다음 스프린트 계획
### 우선순위 높은 UserStory
- [ ] UserStory 1
- [ ] UserStory 2
- [ ] UserStory 3
              
### 예상 Story Point
- **목표 Story Point**: 40 SP
- **예상 완료 UserStory**: 8개
              
## 📝 액션 아이템
- [ ] 액션 1
- [ ] 액션 2
- [ ] 액션 3
              
## 👥 팀 피드백
<!-- 팀원들의 피드백을 여기에 작성하세요 -->`,
              labels: ['sprint-review', 'done']
            });
            
            console.log(`Created Sprint ${sprintNumber} review issue: #${reviewIssue.data.number}`);

  sprint-close:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'close'
    runs-on: ubuntu-latest
    steps:
      - name: Close Sprint
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // 현재 스프린트 번호 계산
            const startDate = new Date('2024-01-01');
            const currentDate = new Date();
            const weeksSinceStart = Math.floor((currentDate - startDate) / (7 * 24 * 60 * 60 * 1000));
            const sprintNumber = weeksSinceStart;
            
            console.log(`Closing Sprint ${sprintNumber}`);
            
            // 진행 중인 UserStory들을 다음 스프린트로 이동
            const inProgressUserStories = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue label:user-story label:in-progress`
            });
            
            for (const userStory of inProgressUserStories.data.items) {
              await github.rest.issues.addLabels({
                owner: owner,
                repo: repo,
                issue_number: userStory.number,
                labels: ['ready-for-work']
              });
              
              await github.rest.issues.removeLabel({
                owner: owner,
                repo: repo,
                issue_number: userStory.number,
                name: 'in-progress'
              }).catch(() => {});
              
              console.log(`Moved UserStory #${userStory.number} to ready-for-work for next sprint`);
            }
            
            // 스프린트 종료 이슈 생성
            const closeIssue = await github.rest.issues.create({
              owner: owner,
              repo: repo,
              title: `[SPRINT-CLOSE] Sprint ${sprintNumber} 종료`,
              body: `# Sprint ${sprintNumber} 종료
              
## 📊 최종 통계
- **완료된 UserStory**: ${completedUserStories.data.items.length}개
- **완료된 Feature**: ${completedFeatures.data.items.length}개
- **완료된 Task**: ${completedTasks.data.items.length}개
              
## 🔄 다음 스프린트 준비
- 미완료 UserStory들을 다음 스프린트로 이동
- 새로운 UserStory 우선순위 조정
- 팀 벨로시티 분석 완료
              
## 📝 스프린트 회고
<!-- 스프린트 회고 내용을 여기에 작성하세요 -->`,
              labels: ['sprint-close', 'done']
            });
            
            console.log(`Created Sprint ${sprintNumber} close issue: #${closeIssue.data.number}`);
